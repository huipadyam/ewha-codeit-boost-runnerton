// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // 사용자 아이디 (Primary Key)
  id         String @id @default(uuid())
  // 로그인 제공자 (ex. "google")
  provider   String
  // 로그인 제공자 아이디 (Google에서 제공하는 아이디)
  providerId String @unique
  // OAuth 토큰
  token      String @db.Text
  // 사용자 이름
  name       String
  // 사용자의 Google 아이디 
  email      String @unique

  reviews Review[]
  wishes  Wish[]
  travels Travel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([providerId])
}

model Place {
  // 장소 아이디 (Primary Key)
  id           String  @id @default(uuid())
  // 장소 이름
  name         String
  // 장소 설명
  description  String?
  // 장소 위치 (latitude와 longitude를 포함하는 JSON)
  location     Json
  // 평균 평점
  rating       Float?
  // 지역 (ex: 서울특별시 등)
  region       String?
  // 이미지 URL
  imageUrl     String?
  // 운영시간
  openingHours String?
  // 전화번호
  phoneNumber  String?

  reviews Review[]
  wishes  Wish[]
  events  Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  // 리뷰 아이디 (Primary Key)
  id      String @id @default(uuid())
  // 사용자 아이디 (Forien Key)
  userId  String
  // 장소 아이디 (Forien Key)
  placeId String
  // 리뷰 평점
  rating  Int
  // 리뷰 평점
  comment String

  user  User  @relation(fields: [userId], references: [id])
  place Place @relation(fields: [placeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([placeId])
}

model Wish {
  // 찜 아이디 (Primary Key)
  id      String  @id @default(uuid())
  // 사용자 아이디 (Forien Key)
  userId  String
  // 장소 아이디 (Forien Key)
  placeId String
  // 찜 메모
  comment String?

  user  User  @relation(fields: [userId], references: [id])
  place Place @relation(fields: [placeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([placeId])
}

model Travel {
  // 여행 계획 (Primary Key)
  id          String   @id @default(uuid())
  // 사용자 아이디 (Forien Key)
  userId      String
  // 여행 계획 설명
  description String
  // 여행 시작 날짜
  startDate   DateTime
  // 여행 종료 날짜
  endDate     DateTime

  user User  @relation(fields: [userId], references: [id])
  days Day[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Day {
  // 일별 계획 아이디 (Primary Key)
  id       String @id @default(uuid())
  // 여행 계획 아이디 (Forien Key)
  travelId String
  // 일차 (ex. 1, 2, 3, ...)
  day      Int

  travel Travel  @relation(fields: [travelId], references: [id])
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([travelId])
}

model Event {
  // 일정 아이디 (Primary Key)
  id      String @id @default(uuid())
  // 일별 계획 아이디 (Forien Key)
  dayId   String
  // 장소 아이디 (Forien Key)
  placeId String
  // 순서 (ex. 1, 2, 3, ...)
  order   Int
  comment String

  day   Day   @relation(fields: [dayId], references: [id])
  place Place @relation(fields: [placeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayId])
  @@index([placeId])
}
