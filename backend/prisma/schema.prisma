// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid()) // 고유 ID
  provider       String
  providerId     String   @unique
  token          String
  name           String
  email          String   @unique

  reviews        Review[]
  wishes         Wish[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([email])
  @@index([providerId])
}

model Place {
  id             String   @id @default(uuid())
  name           String
  description    String
  location       Json     // latitude와 longitude를 포함하는 JSON
  rating         Float?

  reviews        Review[]
  wishes         Wish[]
  events    Event[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  placeId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  place    Place  @relation(fields: [placeId], references: [id])
  
  @@index([userId])
  @@index([placeId])
}

model Wish {
  id        String   @id @default(uuid())
  userId    String
  placeId   String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  place    Place  @relation(fields: [placeId], references: [id])
  
  @@index([userId])
  @@index([placeId])
}

model Travel {
  id          String   @id @default(uuid())
  userId      String
  description String
  startDate   DateTime
  endDate     DateTime

  days        Day[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Day {
  id        String   @id @default(uuid())
  travelId  String
  day       Int

  travel    Travel   @relation(fields: [travelId], references: [id])
  events    Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([travelId])
}

model Event {
  id        String   @id @default(uuid())
  dayId     String
  placeId   String
  order     Int

  day       Day      @relation(fields: [dayId], references: [id])
  place     Place    @relation(fields: [placeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayId])
  @@index([placeId])
}